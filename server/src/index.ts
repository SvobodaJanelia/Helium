#!/usr/bin/env node

import chalk from 'chalk';
import * as listEndpoints from 'express-list-endpoints';
import * as fs from 'fs';
import * as _ from 'lodash';
import * as path from 'path';
import { Helium } from './helium';

// tslint:disable:no-console

// Catch unhandled Promises
process.on('unhandledRejection', (reason) => {
    console.log('Unhandled Promise rejection: ');
    throw reason;
});

const options: BootstrapOptions = {
    port: process.env.PORT === undefined ? 3000 : parseInt(process.env.PORT, 10)
};

const bootstrap = async (opts: BootstrapOptions, metadata: AppMeta) => {
    console.log(chalk.bold(`Starting ${metadata.name} v${metadata.version}`));

    const app = new Helium();

    try {
        await app.start();
    } catch (ex) {
        fatalError('Unable to start: ' + ex.message);
    }

    app.express.listen(options.port, () => {
        logEndpoints(app);
        console.log('\nMagic is happening on port ' + chalk.bold(options.port.toString()));
    }).on('error', fatalError);
};

/** Logs a list of available endpoints to stdout */
const logEndpoints = (app: Helium) => {
    console.log('Available endpoints:\n');
    const endpoints = _.sortBy(listEndpoints(app.express), (e: any) => e.path);
    for (const e of endpoints) {
        console.log(`  ${_.join(e.methods, ', ')} ${e.path}`);
    }
};

const loadMetadata = (): AppMeta => {
    let contents: string;
    try {
        contents = fs.readFileSync(path.resolve(__dirname, 'about.json'), 'utf8');
    } catch (ex) {
        fatalError(`Could not read ${path.resolve(__dirname, 'about.json')}` +
            `, try running 'gulp server:about'`);
        // fatalError calls process.exit(), this is just for the compiler
        throw ex;
    }

    return JSON.parse(contents) as AppMeta;
};

const fatalError = (err: any) => {
    process.stderr.write(chalk.red(err) + '\n');
    process.exit(1);
};

bootstrap(options, loadMetadata());

/** Shape of the JSON document generated by gulp-about */
interface AppMeta {
    name: string;
    version: string;
}

interface BootstrapOptions {
    port: number;
}
